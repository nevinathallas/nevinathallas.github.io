"use client"
import { Renderer, Triangle, Program, Color, Mesh } from 'ogl';
import React, { useRef, useEffect } from 'react';

var styles = {"gradient-canvas":"uvc__gradient-canvas"};

var vert = "#version 300 es\n\nprecision highp float;\n\nin vec2 position;\n\nout vec2 vUv;\n\nvoid main() {\n    vUv = position * 0.5 + 0.5; \n    gl_Position = vec4(position, 0.0, 1.0);  \n}\n";

var frag = "#version 300 es\n\nprecision highp float;\n\nuniform float uTime;     // Time variable for animations\nuniform vec3 uColor;     // Base color (optional)\n\nin vec2 vUv;             // UV coordinates from the vertex shader\n\nout vec4 fragColor;      // Output color for the fragment\n\n// Color Ramp Macro\nstruct ColorStop {\n    vec3 color;\n    float position;\n};\n\n#define COLOR_RAMP(colors, factor, finalColor) { \\\n    int index = 0; \\\n    for (int i = 0; i < colors.length() - 1; i++) { \\\n        ColorStop currentColor = colors[i]; \\\n        bool isInBetween = currentColor.position <= factor; \\\n        index = int(mix(float(index), float(i), float(isInBetween))); \\\n    } \\\n    ColorStop currentColor = colors[index]; \\\n    ColorStop nextColor = colors[index + 1]; \\\n    float range = nextColor.position - currentColor.position; \\\n    float lerpFactor = (factor - currentColor.position) / range; \\\n    finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n}\n\nvoid main() {\n    // Define color stops for a retro rainbow effect\n    ColorStop colors[3];\n    colors[0] = ColorStop(vec3(80.0 / 255.0, 180.0 / 255.0, 80.0 / 255.0), 0.0);  // Balanced Lime Green\n    colors[1] = ColorStop(vec3(0.0 / 255.0, 180.0 / 255.0, 150.0 / 255.0), 0.5);  // Balanced Turquoise\n    colors[2] = ColorStop(vec3(0.0 / 255.0, 140.0 / 255.0, 180.0 / 255.0), 1.0);  // Balanced Ocean Blue\n\n    vec3 rampColor;\n    COLOR_RAMP(colors, vUv.x, rampColor);\n\n    float height = (vUv.y * 2.0);\n\n    // Moving scanlines, with subtle dimming effect using cosine\n    float scanline = 0.75 + 0.25 * sin((vUv.y * 200.0) + uTime * 3.0);  // Lower intensity for dimming effect\n\n    // Final color blending with noise, color ramp, and moving scanline effects\n    fragColor.rgb = scanline * rampColor * (height + vec3(0.0));\n    fragColor.a = 1.0;\n}\n";

function Xenon(props) {
    const ctnDom = useRef(null);
    useEffect(() => {
        if (!ctnDom.current) {
            return;
        }
        const ctn = ctnDom.current;
        const renderer = new Renderer();
        const gl = renderer.gl;
        gl.clearColor(1, 1, 1, 1);
        function resize() {
            const scale = 1;
            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);
        }
        window.addEventListener("resize", resize, false);
        resize();
        const geometry = new Triangle(gl);
        const program = new Program(gl, {
            vertex: vert,
            fragment: frag,
            uniforms: {
                uTime: { value: 0 },
                uColor: { value: new Color(0.3, 0.2, 0.5) },
                uResolution: { value: [gl.canvas.width, gl.canvas.height] }, // Changed to vec2
            },
        });
        const mesh = new Mesh(gl, { geometry, program });
        let animateId;
        animateId = requestAnimationFrame(update);
        function update(t) {
            animateId = requestAnimationFrame(update);
            program.uniforms.uTime.value = t * 0.001;
            // Don't need a camera if camera uniforms aren't required
            renderer.render({ scene: mesh });
        }
        ctn.appendChild(gl.canvas);
        return () => {
            cancelAnimationFrame(animateId);
            window.removeEventListener("resize", resize);
            ctn.removeChild(gl.canvas);
            gl.getExtension("WEBGL_lose_context")?.loseContext();
        };
    }, []);
    return (React.createElement("div", { ref: ctnDom, className: styles.gradientCanvas, style: {
            width: "100%",
            height: "100%",
        }, ...props }));
}

export { Xenon };
