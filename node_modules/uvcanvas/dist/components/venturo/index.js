"use client"
import { Renderer, Triangle, Program, Color, Mesh } from 'ogl';
import React, { useRef, useEffect } from 'react';

var vert = "#version 300 es\n\nin vec2 uv;\nin vec2 position;\n\nout vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4(position, 0, 1);\n}";

var frag = "#version 300 es\n\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uColor;\n\nin vec2 vUv;\nout vec4 fragColor;\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n    -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\n// Version 3 ( possibly the fastest version, using a mix instead of a ternary operator ):\n\n/* ** ColorStop Point data structure for the COLOR_RAMP macro\ncolor -> the color of the color stop\nposition -> position of the color stop on the color ramp -> [0, 1]\n*/\nstruct ColorStop {\n    vec3 color;\n    float position;\n};\n\n/* ** COLOR_RAMP macro by Arya Ross -> based on Blender's ColorRamp Node in the shading tab\nColorStop[?] colors -> array of color stops that can have any length\nfloat factor -> the position that you want to know the color of -> [0, 1]\nvec3 finalColor -> the final color based on the factor\n\nLine 5 Of The Macro:\n// possibly is bad for performance\nindex = isInBetween ? i : index; \\\n\nTaken From: https://stackoverflow.com/a/26219603/19561482\nindex = int(mix(float(index), float(i), float(isInBetween))); \\\n*/\n#define COLOR_RAMP(colors, factor, finalColor) { \\\n    int index = 0; \\\n    for(int i = 0; i < colors.length() - 1; i++){ \\\n       ColorStop currentColor = colors[i]; \\\n       bool isInBetween = currentColor.position <= factor; \\\n       index = int(mix(float(index), float(i), float(isInBetween))); \\\n    } \\\n    ColorStop currentColor = colors[index]; \\\n    ColorStop nextColor = colors[index + 1]; \\\n    float range = nextColor.position - currentColor.position; \\\n    float lerpFactor = (factor - currentColor.position) / range; \\\n    finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n} \\\n\n\nvoid main() {\n\n    ColorStop colors[3];\n\n    colors[0] = ColorStop(vec3( 58.0 / 255.0,  41.0 / 255.0, 255.0 / 255.0), 0.0);\n    colors[1] = ColorStop(vec3(255.0 / 255.0, 148.0 / 255.0, 180.0 / 255.0), 0.5);\n    colors[2] = ColorStop(vec3(255.0 / 255.0,  50.0 / 255.0,  50.0 / 255.0), 1.0);\n\n    vec3 rampColor;\n    COLOR_RAMP(colors, vUv.x, rampColor);\n\n    float height = snoise(vec2(vUv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5;\n//    height = pow(height + 1.0, 1.5) - 1.0;\n    height = exp(height);\n    height = (vUv.y * 2.0 - height + 0.2);\n//    height = smoothstep(0.0, 1.0, height);\n    //    height = pow(height, 1.5);\n    fragColor.rgb = 0.0 + 0.6 * height * rampColor + vec3(0.0);\n    fragColor.a = 1.0;\n}";

function Venturo(props) {
    const propsRef = useRef(props);
    const ctnDom = useRef(null);
    useEffect(() => {
        propsRef.current = props;
    });
    useEffect(() => {
        if (!ctnDom.current) {
            return;
        }
        const ctn = ctnDom.current;
        const renderer = new Renderer();
        const gl = renderer.gl;
        gl.clearColor(1, 1, 1, 1);
        function resize() {
            if (ctn == null) {
                return;
            }
            const scale = 1;
            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);
        }
        window.addEventListener("resize", resize, false);
        resize();
        const geometry = new Triangle(gl);
        const program = new Program(gl, {
            vertex: vert,
            fragment: frag,
            uniforms: {
                uTime: { value: 0 },
                uColor: { value: new Color(0.3, 0.2, 0.5) },
            },
        });
        const mesh = new Mesh(gl, { geometry, program });
        let animateId;
        animateId = requestAnimationFrame(update);
        function update(t) {
            animateId = requestAnimationFrame(update);
            const { time: time = t * 0.01, speed = 1.0 } = propsRef.current;
            program.uniforms.uTime.value = time * speed * 0.1;
            renderer.render({ scene: mesh });
        }
        ctn.appendChild(gl.canvas);
        return () => {
            cancelAnimationFrame(animateId);
            window.removeEventListener("resize", resize);
            ctn.removeChild(gl.canvas);
            gl.getExtension("WEBGL_lose_context")?.loseContext();
        };
    }, []);
    return (React.createElement("div", { ref: ctnDom, style: {
            width: "100%",
            height: "100%",
        }, ...props }));
}

export { Venturo };
