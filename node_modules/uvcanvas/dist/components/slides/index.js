"use client"
import { useHotkeys } from 'react-hotkeys-hook';
import React, { useMemo, useEffect, useRef } from 'react';
import { AspectRatio } from '@radix-ui/react-aspect-ratio';
import { useResizeDetector } from 'react-resize-detector';
import { Provider, useAtom, useSetAtom } from 'jotai';
import { p as pageAtom, s as stepAtom, m as metadatasAtom, a as setPageAtom, f as fullscreenAtom } from '../../state.js';

function SlidesInner({ mdx, components, children, style, className, ...rest }) {
    const [currentPage, setCurrentPage] = useAtom(pageAtom);
    const [currentStep, setCurrentStep] = useAtom(stepAtom);
    const [currentMetadatas, setMetadatas] = useAtom(metadatasAtom);
    const setPage = useSetAtom(setPageAtom);
    const metadatas = useMemo(() => {
        const tempMetadata = mdx.map((item) => ({
            ...item.metadata,
        }));
        setMetadatas(tempMetadata);
        return tempMetadata;
    }, [mdx]);
    const metadata = metadatas[currentPage];
    const step = metadata.step ?? 1;
    const pageDown = () => {
        setPage({
            forward: false
        });
    };
    const pageUp = () => {
        setPage({
            forward: true
        });
    };
    const [isFullscreen, setFullscreen] = useAtom(fullscreenAtom);
    useEffect(() => {
        if (isFullscreen) {
            containerRef.current?.requestFullscreen().then(() => { });
        }
        else {
            if (document.fullscreenElement) {
                document.exitFullscreen().then(() => { });
            }
        }
    }, [isFullscreen]);
    const { width = 320, height, ref } = useResizeDetector();
    const containerRef = useRef(null);
    const leftRef = useHotkeys("left", pageDown);
    const rightRef = useHotkeys("right", pageUp);
    useHotkeys("f", () => setFullscreen(!isFullscreen));
    useEffect(() => {
        ref.current = containerRef.current;
        leftRef.current = containerRef.current;
        rightRef.current = containerRef.current;
    }, [ref, leftRef, rightRef]);
    const styleVariables = {
        "--svw": `${(width * 1) / 100}px`,
    };
    const constants = {
        currentPage: currentPage,
        totalPage: mdx.length,
        currentStep: currentStep,
        totalStep: step,
    };
    return (React.createElement("div", { ref: containerRef, tabIndex: -1, style: {
            width: "100%",
            overflow: "hidden",
            userSelect: "none",
            outline: "none",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            ...styleVariables,
            ...style,
        }, className: "uvc__slides " + className, ...rest },
        React.createElement("div", { style: {
                fontSize: `calc(2.25 * var(--svw))`,
                lineHeight: "1.5em",
                position: "relative",
                zoom: "1",
                overflow: "hidden",
            } },
            React.createElement("div", { style: {
                    position: "absolute",
                    left: "0",
                    top: "0",
                    width: "100%",
                    height: "100%",
                    padding: "5%",
                } }, mdx[currentPage]?.default({
                components,
                ...constants,
            })),
            React.createElement("div", { style: {
                    position: "absolute",
                    left: "0",
                    top: "0",
                    width: "100%",
                    height: "100%",
                }, onDoubleClick: () => setFullscreen(!isFullscreen) }),
            children,
            React.createElement("div", { style: {
                    pointerEvents: "none",
                } },
                React.createElement(AspectRatio, { ratio: 16 / 9 })))));
}
function Slides(props) {
    return (React.createElement(Provider, null,
        React.createElement(SlidesInner, { ...props })));
}

export { Slides };
